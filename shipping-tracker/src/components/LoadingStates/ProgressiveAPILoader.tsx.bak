import React, { useState, useEffect } from 'react';\nimport { EnhancedSkeletonLoader } from './EnhancedSkeletonLoader';\nimport { TimeoutHandler } from './TimeoutHandler';\n\ninterface APIProvider {\n  name: string;\n  tier: 'free' | 'freemium' | 'premium';\n  status: 'pending' | 'active' | 'completed' | 'failed' | 'skipped';\n  responseTime?: number;\n  error?: string;\n  description: string;\n  estimatedTime: number;\n}\n\ninterface ProgressiveAPILoaderProps {\n  isLoading: boolean;\n  trackingNumber?: string;\n  currentStep?: string;\n  providers?: APIProvider[];\n  elapsedTime?: number;\n  error?: string;\n  onCancel?: () => void;\n  onRetry?: () => void;\n  onSwitchToDemo?: () => void;\n  className?: string;\n  showProviderDetails?: boolean;\n  showTimeoutHandler?: boolean;\n  timeoutMs?: number;\n  loadingType?: 'shipment-details' | 'timeline' | 'map' | 'search-results';\n}\n\n/**\n * Progressive API loader that shows which APIs are being tried with detailed feedback\n * Implements Requirements 5.1, 5.2 for progressive loading messages and intermediate feedback\n */\nexport function ProgressiveAPILoader({\n  isLoading,\n  trackingNumber,\n  currentStep,\n  providers = [],\n  elapsedTime = 0,\n  error,\n  onCancel,\n  onRetry,\n  onSwitchToDemo,\n  className = '',\n  showProviderDetails = true,\n  showTimeoutHandler = true,\n  timeoutMs = 30000,\n  loadingType = 'shipment-details',\n}: ProgressiveAPILoaderProps) {\n  const [progressMessages, setProgressMessages] = useState<string[]>([]);\n  const [showDetailedView, setShowDetailedView] = useState(false);\n  const [currentMessage, setCurrentMessage] = useState('');\n\n  // Generate progressive messages based on elapsed time and current step\n  useEffect(() => {\n    if (!isLoading) {\n      setProgressMessages([]);\n      setCurrentMessage('');\n      return;\n    }\n\n    const messages: string[] = [];\n    let message = 'Searching for tracking information...';\n\n    // Time-based messages\n    if (elapsedTime > 3000) {\n      messages.push('Checking multiple data sources...');\n      message = 'This may take a moment...';\n    }\n    \n    if (elapsedTime > 8000) {\n      messages.push('Trying alternative providers...');\n      message = 'Still working on your request...';\n    }\n    \n    if (elapsedTime > 15000) {\n      messages.push('Some APIs are responding slowly...');\n      message = 'Almost there, please be patient...';\n    }\n    \n    if (elapsedTime > 20000) {\n      messages.push('Exploring additional data sources...');\n      message = 'Trying our best to find your shipment...';\n    }\n\n    // Step-based messages\n    if (currentStep) {\n      const activeProvider = providers.find(p => p.status === 'active');\n      \n      if (activeProvider) {\n        if (activeProvider.tier === 'free' && elapsedTime > 5000) {\n          messages.push(`${activeProvider.name} (free tier) is taking longer than usual...`);\n        }\n        \n        if (activeProvider.tier === 'premium') {\n          message = `Using premium ${activeProvider.name} service...`;\n        }\n        \n        if (elapsedTime > activeProvider.estimatedTime * 1.5) {\n          messages.push(`${activeProvider.name} is experiencing delays...`);\n        }\n      }\n    }\n\n    setProgressMessages(messages);\n    setCurrentMessage(message);\n  }, [elapsedTime, currentStep, providers, isLoading]);\n\n  const formatTime = (ms: number): string => {\n    if (ms < 1000) return `${Math.round(ms)}ms`;\n    if (ms < 60000) return `${Math.round(ms / 1000)}s`;\n    return `${Math.floor(ms / 60000)}m ${Math.round((ms % 60000) / 1000)}s`;\n  };\n\n  const getProviderStatusIcon = (status: APIProvider['status']) => {\n    switch (status) {\n      case 'completed':\n        return (\n          <svg className=\"w-5 h-5 text-green-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      case 'active':\n        return (\n          <div className=\"w-5 h-5 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\" />\n        );\n      case 'failed':\n        return (\n          <svg className=\"w-5 h-5 text-red-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      case 'skipped':\n        return (\n          <svg className=\"w-5 h-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      default:\n        return (\n          <div className=\"w-5 h-5 border-2 border-gray-300 rounded-full\" />\n        );\n    }\n  };\n\n  const getTierBadgeColor = (tier: string) => {\n    switch (tier) {\n      case 'premium':\n        return 'bg-purple-100 text-purple-800 border-purple-200';\n      case 'freemium':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'free':\n        return 'bg-green-100 text-green-800 border-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getOverallProgress = (): number => {\n    if (providers.length === 0) return 0;\n    \n    const completedCount = providers.filter(p => p.status === 'completed' || p.status === 'failed').length;\n    const activeCount = providers.filter(p => p.status === 'active').length;\n    \n    return Math.round(((completedCount + activeCount * 0.5) / providers.length) * 100);\n  };\n\n  const shouldShowTimeoutHandler = showTimeoutHandler && elapsedTime > timeoutMs * 0.8;\n\n  if (!isLoading && !error) return null;\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Timeout Handler */}\n      {shouldShowTimeoutHandler && (\n        <TimeoutHandler\n          isVisible={true}\n          elapsedTime={elapsedTime}\n          timeoutMs={timeoutMs}\n          trackingNumber={trackingNumber}\n          onRetry={onRetry}\n          onCancel={onCancel}\n          onSwitchToDemo={onSwitchToDemo}\n        />\n      )}\n\n      {/* Main Loading Content */}\n      <div className=\"bg-white border border-gray-200 rounded-lg shadow-sm\">\n        {/* Header */}\n        <div className=\"p-6 border-b border-gray-100\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                {error ? 'Loading Failed' : 'Searching for Tracking Information'}\n              </h3>\n              {trackingNumber && (\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Tracking: <span className=\"font-mono font-medium\">{trackingNumber}</span>\n                </p>\n              )}\n            </div>\n            \n            {isLoading && (\n              <div className=\"text-right\">\n                <div className=\"text-sm text-gray-500\">\n                  {formatTime(elapsedTime)} elapsed\n                </div>\n                {onCancel && (\n                  <button\n                    onClick={onCancel}\n                    className=\"text-xs text-gray-400 hover:text-gray-600 mt-1 transition-colors\"\n                  >\n                    Cancel\n                  </button>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Progress Bar */}\n          {isLoading && providers.length > 0 && (\n            <div className=\"mt-4\">\n              <div className=\"flex items-center justify-between text-sm text-gray-600 mb-2\">\n                <span>Overall Progress</span>\n                <span>{getOverallProgress()}%</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div \n                  className=\"bg-blue-500 h-2 rounded-full transition-all duration-500 ease-out\"\n                  style={{ width: `${getOverallProgress()}%` }}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Current Status */}\n        {isLoading && currentMessage && (\n          <div className=\"px-6 py-4 bg-blue-50 border-b border-gray-100\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-5 h-5 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\" />\n              <span className=\"text-sm font-medium text-blue-800\">{currentMessage}</span>\n            </div>\n          </div>\n        )}\n\n        {/* Provider Details */}\n        {showProviderDetails && providers.length > 0 && (\n          <div className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h4 className=\"text-sm font-medium text-gray-700\">API Providers</h4>\n              <button\n                onClick={() => setShowDetailedView(!showDetailedView)}\n                className=\"text-xs text-blue-600 hover:text-blue-800 transition-colors\"\n              >\n                {showDetailedView ? 'Hide Details' : 'Show Details'}\n              </button>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {providers.map((provider, index) => (\n                <div key={provider.name} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-md\">\n                  <div className=\"flex items-center space-x-3\">\n                    {getProviderStatusIcon(provider.status)}\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-medium text-gray-900\">\n                          {provider.name}\n                        </span>\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full border ${getTierBadgeColor(provider.tier)}`}>\n                          {provider.tier}\n                        </span>\n                        {provider.status === 'active' && (\n                          <span className=\"px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full\">\n                            Active\n                          </span>\n                        )}\n                      </div>\n                      \n                      {showDetailedView && (\n                        <div className=\"mt-1 space-y-1\">\n                          <p className=\"text-xs text-gray-600\">{provider.description}</p>\n                          <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                            <span>Est. time: {formatTime(provider.estimatedTime)}</span>\n                            {provider.responseTime && (\n                              <span>Actual: {formatTime(provider.responseTime)}</span>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                      \n                      {provider.error && (\n                        <p className=\"text-xs text-red-600 mt-1\">{provider.error}</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {provider.responseTime && (\n                    <span className=\"text-xs text-gray-500\">\n                      {formatTime(provider.responseTime)}\n                    </span>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Progressive Messages */}\n        {progressMessages.length > 0 && (\n          <div className=\"px-6 py-4 border-t border-gray-100\">\n            <div className=\"bg-blue-50 border border-blue-200 rounded-md p-4\">\n              <div className=\"flex items-start\">\n                <div className=\"flex-shrink-0\">\n                  <svg className=\"w-5 h-5 text-blue-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div className=\"ml-3\">\n                  <h4 className=\"text-sm font-medium text-blue-800\">Status Updates</h4>\n                  <div className=\"mt-2 space-y-1\">\n                    {progressMessages.slice(-3).map((message, index) => (\n                      <p key={index} className=\"text-sm text-blue-700\">\n                        • {message}\n                      </p>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Error State */}\n        {error && (\n          <div className=\"p-6 border-t border-gray-100\">\n            <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n              <div className=\"flex items-start\">\n                <div className=\"flex-shrink-0\">\n                  <svg className=\"w-5 h-5 text-red-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div className=\"ml-3\">\n                  <h4 className=\"text-sm font-medium text-red-800\">Error</h4>\n                  <p className=\"mt-1 text-sm text-red-700\">{error}</p>\n                  {onRetry && (\n                    <div className=\"mt-3\">\n                      <button\n                        onClick={onRetry}\n                        className=\"text-sm bg-red-100 hover:bg-red-200 text-red-800 px-3 py-1 rounded-md transition-colors\"\n                      >\n                        Try Again\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Skeleton Content */}\n        {isLoading && !shouldShowTimeoutHandler && (\n          <div className=\"p-6 border-t border-gray-100\">\n            <EnhancedSkeletonLoader\n              type={loadingType}\n              showProgress={false}\n              className=\"opacity-60\"\n            />\n          </div>\n        )}\n\n        {/* Footer with helpful tips */}\n        {isLoading && elapsedTime > 10000 && !shouldShowTimeoutHandler && (\n          <div className=\"px-6 py-4 bg-gray-50 border-t border-gray-100 rounded-b-lg\">\n            <div className=\"text-xs text-gray-500\">\n              <p className=\"mb-1\">💡 <strong>Tip:</strong> We're checking multiple data sources to get you the most accurate information.</p>\n              <p>Free tier APIs may respond slower than premium services.</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ProgressiveAPILoader;"