import React, { useState, useEffect, useRef } from 'react';\nimport { useMobileOptimization, mobileUtils } from '../../hooks/useMobileOptimization';\n\ninterface MobileResponsiveLayoutProps {\n  children: React.ReactNode;\n  className?: string;\n  enableSwipeGestures?: boolean;\n  enablePullToRefresh?: boolean;\n  onRefresh?: () => Promise<void>;\n  showBackButton?: boolean;\n  onBack?: () => void;\n  title?: string;\n  headerActions?: React.ReactNode;\n  bottomNavigation?: React.ReactNode;\n  stickyHeader?: boolean;\n  fullHeight?: boolean;\n}\n\n/**\n * Mobile-responsive layout component with touch optimizations\n * Implements Requirements 4.1, 4.2, 4.3, 4.4 for mobile experience optimization\n */\nexport function MobileResponsiveLayout({\n  children,\n  className = '',\n  enableSwipeGestures = false,\n  enablePullToRefresh = false,\n  onRefresh,\n  showBackButton = false,\n  onBack,\n  title,\n  headerActions,\n  bottomNavigation,\n  stickyHeader = true,\n  fullHeight = false,\n}: MobileResponsiveLayoutProps) {\n  const mobile = useMobileOptimization();\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [pullDistance, setPullDistance] = useState(0);\n  const [swipeDirection, setSwipeDirection] = useState<'left' | 'right' | null>(null);\n  const [touchStart, setTouchStart] = useState<{ x: number; y: number } | null>(null);\n  const [headerHeight, setHeaderHeight] = useState(0);\n  \n  const containerRef = useRef<HTMLDivElement>(null);\n  const headerRef = useRef<HTMLDivElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const pullThreshold = 80;\n  const swipeThreshold = 50;\n\n  // Measure header height\n  useEffect(() => {\n    if (headerRef.current) {\n      const height = headerRef.current.offsetHeight;\n      setHeaderHeight(height);\n    }\n  }, [title, headerActions]);\n\n  // Handle touch start\n  const handleTouchStart = (e: React.TouchEvent) => {\n    if (!mobile.touchSupported) return;\n    \n    const touch = e.touches[0];\n    setTouchStart({ x: touch.clientX, y: touch.clientY });\n    setPullDistance(0);\n    setSwipeDirection(null);\n  };\n\n  // Handle touch move\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (!touchStart || !mobile.touchSupported) return;\n    \n    const touch = e.touches[0];\n    const deltaX = touch.clientX - touchStart.x;\n    const deltaY = touch.clientY - touchStart.y;\n    \n    // Handle pull to refresh\n    if (enablePullToRefresh && deltaY > 0 && window.scrollY === 0) {\n      e.preventDefault();\n      const distance = Math.min(deltaY * 0.5, pullThreshold * 1.5);\n      setPullDistance(distance);\n      \n      // Provide haptic feedback at threshold\n      if (distance >= pullThreshold && pullDistance < pullThreshold) {\n        mobile.vibrate(50);\n      }\n    }\n    \n    // Handle swipe gestures\n    if (enableSwipeGestures && Math.abs(deltaX) > swipeThreshold && Math.abs(deltaY) < 50) {\n      const direction = deltaX > 0 ? 'right' : 'left';\n      setSwipeDirection(direction);\n      \n      // Provide haptic feedback\n      if (!swipeDirection) {\n        mobile.vibrate(30);\n      }\n    }\n  };\n\n  // Handle touch end\n  const handleTouchEnd = async () => {\n    if (!touchStart) return;\n    \n    // Handle pull to refresh\n    if (enablePullToRefresh && pullDistance >= pullThreshold && onRefresh) {\n      setIsRefreshing(true);\n      try {\n        await onRefresh();\n        mobile.vibrate([50, 50, 50]); // Success vibration\n      } catch (error) {\n        console.error('Refresh failed:', error);\n        mobile.vibrate(200); // Error vibration\n      } finally {\n        setIsRefreshing(false);\n      }\n    }\n    \n    // Handle swipe gestures\n    if (enableSwipeGestures && swipeDirection) {\n      if (swipeDirection === 'right' && onBack) {\n        onBack();\n      }\n      // Add more swipe actions as needed\n    }\n    \n    // Reset state\n    setTouchStart(null);\n    setPullDistance(0);\n    setSwipeDirection(null);\n  };\n\n  // Get container classes\n  const getContainerClasses = () => {\n    const baseClasses = 'relative';\n    const heightClasses = fullHeight ? 'min-h-screen' : 'min-h-full';\n    const safeAreaClasses = mobile.isIOS ? 'pb-safe-area-inset-bottom' : '';\n    \n    return `${baseClasses} ${heightClasses} ${safeAreaClasses} ${className}`;\n  };\n\n  // Get header classes\n  const getHeaderClasses = () => {\n    const baseClasses = 'bg-white border-b border-gray-200 z-10';\n    const stickyClasses = stickyHeader ? 'sticky top-0' : '';\n    const safeAreaClasses = mobile.isIOS ? 'pt-safe-area-inset-top' : '';\n    const shadowClasses = mobile.isMobile ? 'shadow-sm' : 'shadow-none';\n    \n    return `${baseClasses} ${stickyClasses} ${safeAreaClasses} ${shadowClasses}`;\n  };\n\n  // Get content classes\n  const getContentClasses = () => {\n    const baseClasses = 'flex-1';\n    const paddingClasses = mobile.isMobile ? 'px-4' : 'px-6';\n    const bottomPaddingClasses = bottomNavigation ? 'pb-16' : 'pb-4';\n    \n    return `${baseClasses} ${paddingClasses} ${bottomPaddingClasses}`;\n  };\n\n  // Get pull to refresh indicator\n  const getPullToRefreshIndicator = () => {\n    if (!enablePullToRefresh || pullDistance === 0) return null;\n    \n    const progress = Math.min(pullDistance / pullThreshold, 1);\n    const rotation = progress * 360;\n    const opacity = Math.min(progress * 2, 1);\n    \n    return (\n      <div \n        className=\"absolute top-0 left-1/2 transform -translate-x-1/2 z-20 transition-all duration-200\"\n        style={{ \n          transform: `translateX(-50%) translateY(${pullDistance - 40}px)`,\n          opacity \n        }}\n      >\n        <div className=\"bg-white rounded-full p-2 shadow-lg border border-gray-200\">\n          {isRefreshing ? (\n            <div className=\"w-6 h-6 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\" />\n          ) : (\n            <svg \n              className=\"w-6 h-6 text-gray-600\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              viewBox=\"0 0 24 24\"\n              style={{ transform: `rotate(${rotation}deg)` }}\n            >\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n            </svg>\n          )}\n        </div>\n        {progress >= 1 && !isRefreshing && (\n          <div className=\"text-xs text-gray-600 text-center mt-1 whitespace-nowrap\">\n            Release to refresh\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Get swipe indicator\n  const getSwipeIndicator = () => {\n    if (!enableSwipeGestures || !swipeDirection) return null;\n    \n    return (\n      <div className=\"fixed inset-0 pointer-events-none z-30 flex items-center\">\n        <div \n          className={`absolute transition-all duration-200 ${\n            swipeDirection === 'right' ? 'left-4' : 'right-4'\n          }`}\n        >\n          <div className=\"bg-black bg-opacity-75 text-white px-3 py-2 rounded-full flex items-center space-x-2\">\n            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              {swipeDirection === 'right' ? (\n                <path fillRule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n              ) : (\n                <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n              )}\n            </svg>\n            <span className=\"text-sm\">\n              {swipeDirection === 'right' ? 'Back' : 'Forward'}\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div \n      ref={containerRef}\n      className={getContainerClasses()}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    >\n      {/* Pull to refresh indicator */}\n      {getPullToRefreshIndicator()}\n      \n      {/* Swipe indicator */}\n      {getSwipeIndicator()}\n      \n      {/* Header */}\n      {(title || showBackButton || headerActions) && (\n        <header ref={headerRef} className={getHeaderClasses()}>\n          <div className={`flex items-center justify-between ${mobileUtils.getResponsiveSpacing('sm')}`}>\n            {/* Left side */}\n            <div className=\"flex items-center space-x-3\">\n              {showBackButton && (\n                <button\n                  onClick={onBack}\n                  className={`${mobileUtils.getTouchTargetSize(mobile.isMobile)} flex items-center justify-center text-gray-600 hover:text-gray-900 transition-colors`}\n                  aria-label=\"Go back\"\n                >\n                  <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                </button>\n              )}\n              \n              {title && (\n                <h1 className={`font-semibold text-gray-900 truncate ${mobileUtils.getResponsiveTextSize('lg')}`}>\n                  {title}\n                </h1>\n              )}\n            </div>\n            \n            {/* Right side */}\n            {headerActions && (\n              <div className=\"flex items-center space-x-2\">\n                {headerActions}\n              </div>\n            )}\n          </div>\n        </header>\n      )}\n      \n      {/* Main content */}\n      <main \n        ref={contentRef}\n        className={getContentClasses()}\n        style={{\n          paddingTop: stickyHeader && headerHeight > 0 ? `${headerHeight}px` : undefined,\n          transform: pullDistance > 0 ? `translateY(${pullDistance}px)` : undefined,\n          transition: pullDistance === 0 ? 'transform 0.2s ease-out' : 'none',\n        }}\n      >\n        {children}\n      </main>\n      \n      {/* Bottom navigation */}\n      {bottomNavigation && (\n        <nav className={`fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-10 ${mobile.isIOS ? 'pb-safe-area-inset-bottom' : ''}`}>\n          {bottomNavigation}\n        </nav>\n      )}\n      \n      {/* Scroll to top button */}\n      {mobile.isMobile && (\n        <button\n          onClick={mobile.scrollToTop}\n          className=\"fixed bottom-20 right-4 bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-full shadow-lg transition-all duration-200 z-20\"\n          aria-label=\"Scroll to top\"\n        >\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n          </svg>\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default MobileResponsiveLayout;\n"}
</invoke>