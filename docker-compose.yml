version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shipping_tracker_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: shipping_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shipping-tracker-api/src/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - shipping_tracker_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d shipping_tracker"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: shipping_tracker_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - shipping_tracker_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  api:
    build:
      context: ./shipping-tracker-api
      dockerfile: Dockerfile.dev
    container_name: shipping_tracker_api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=shipping_tracker
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_URL=http://localhost:5173
      - CORS_ORIGIN=http://localhost:5173
    volumes:
      - ./shipping-tracker-api:/app
      - /app/node_modules
    networks:
      - shipping_tracker_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - fullstack

  # Frontend Service
  frontend:
    build:
      context: ./shipping-tracker
      dockerfile: Dockerfile.dev
    container_name: shipping_tracker_frontend
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      - VITE_API_BASE_URL=http://localhost:3001/api
      - VITE_DEMO_MODE=true
      - VITE_ENABLE_MOCK_DATA=true
    volumes:
      - ./shipping-tracker:/app
      - /app/node_modules
    networks:
      - shipping_tracker_network
    depends_on:
      api:
        condition: service_healthy
    profiles:
      - fullstack

  # pgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: shipping_tracker_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@shippingtracker.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - shipping_tracker_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - tools

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: shipping_tracker_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - "8081:8081"
    networks:
      - shipping_tracker_network
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  shipping_tracker_network:
    driver: bridge
    name: shipping_tracker_network