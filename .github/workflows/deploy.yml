name: Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Pre-deployment checks
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy-staging: ${{ steps.determine-deployment.outputs.deploy-staging }}
      deploy-production: ${{ steps.determine-deployment.outputs.deploy-production }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine deployment targets
        id: determine-deployment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]] || [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "deploy-staging=true" >> $GITHUB_OUTPUT
          fi
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/tags/v"* ]] || [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "deploy-production=true" >> $GITHUB_OUTPUT
          fi

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(date +%Y%m%d)-${GITHUB_SHA:0:7}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check deployment readiness
        if: ${{ !github.event.inputs.force_deploy }}
        run: |
          # Check if all required secrets are available
          if [[ "${{ steps.determine-deployment.outputs.deploy-production }}" == "true" ]]; then
            if [[ -z "${{ secrets.PRODUCTION_API_URL }}" ]]; then
              echo "Missing PRODUCTION_API_URL secret"
              exit 1
            fi
          fi

  # Build artifacts
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: pre-deployment
    strategy:
      matrix:
        app: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        if: matrix.app == 'frontend'
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Build frontend
        if: matrix.app == 'frontend'
        working-directory: ./shipping-tracker
        run: |
          pnpm install --frozen-lockfile
          pnpm build
        env:
          VITE_APP_VERSION: ${{ needs.pre-deployment.outputs.version }}

      - name: Build backend
        if: matrix.app == 'backend'
        working-directory: ./shipping-tracker-api
        run: |
          npm ci
          npm run build

      - name: Create deployment package
        run: |
          if [[ "${{ matrix.app }}" == "frontend" ]]; then
            cd shipping-tracker
            tar -czf ../frontend-${{ needs.pre-deployment.outputs.version }}.tar.gz dist/ package.json
          else
            cd shipping-tracker-api
            tar -czf ../backend-${{ needs.pre-deployment.outputs.version }}.tar.gz dist/ package.json node_modules/
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-build
          path: ${{ matrix.app }}-${{ needs.pre-deployment.outputs.version }}.tar.gz
          retention-days: 30

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment, build]
    if: needs.pre-deployment.outputs.deploy-staging == 'true'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build

      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build

      - name: Deploy frontend to Vercel/Netlify
        run: |
          echo "Deploying frontend to staging..."
          # Extract and deploy frontend
          tar -xzf frontend-${{ needs.pre-deployment.outputs.version }}.tar.gz
          
          # Example Vercel deployment
          # npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          
          # Example Netlify deployment
          # npx netlify deploy --prod --dir=dist --auth ${{ secrets.NETLIFY_AUTH_TOKEN }}
          
          echo "Frontend deployed to staging"

      - name: Deploy backend to Railway/Render
        run: |
          echo "Deploying backend to staging..."
          # Extract and deploy backend
          tar -xzf backend-${{ needs.pre-deployment.outputs.version }}.tar.gz
          
          # Example Railway deployment
          # railway deploy --service backend
          
          # Example Render deployment
          # curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}
          
          echo "Backend deployed to staging"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Wait for deployment to be ready
          sleep 30
          
          # Basic health check
          curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1
          curl -f ${{ secrets.STAGING_FRONTEND_URL }} || exit 1
          
          echo "Smoke tests passed"

      - name: Update deployment status
        run: |
          echo "Staging deployment completed successfully"
          echo "Frontend URL: ${{ secrets.STAGING_FRONTEND_URL }}"
          echo "Backend URL: ${{ secrets.STAGING_API_URL }}"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment, build, deploy-staging]
    if: needs.pre-deployment.outputs.deploy-production == 'true'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build

      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build

      - name: Blue-Green Deployment Setup
        run: |
          echo "Setting up blue-green deployment..."
          # Create new deployment slot/environment
          DEPLOYMENT_SLOT="green-${{ needs.pre-deployment.outputs.version }}"
          echo "DEPLOYMENT_SLOT=$DEPLOYMENT_SLOT" >> $GITHUB_ENV

      - name: Deploy to Green Environment
        run: |
          echo "Deploying to green environment..."
          # Extract artifacts
          tar -xzf frontend-${{ needs.pre-deployment.outputs.version }}.tar.gz
          tar -xzf backend-${{ needs.pre-deployment.outputs.version }}.tar.gz
          
          # Deploy to green slot
          echo "Deploying frontend to green slot..."
          echo "Deploying backend to green slot..."

      - name: Health Check Green Environment
        run: |
          echo "Performing health checks on green environment..."
          # Wait for green environment to be ready
          sleep 60
          
          # Comprehensive health checks
          GREEN_API_URL="${{ secrets.PRODUCTION_API_URL }}/green"
          GREEN_FRONTEND_URL="${{ secrets.PRODUCTION_FRONTEND_URL }}/green"
          
          # API health check
          curl -f $GREEN_API_URL/health || exit 1
          
          # Frontend health check
          curl -f $GREEN_FRONTEND_URL || exit 1
          
          # Database connectivity check
          curl -f $GREEN_API_URL/api/health/db || exit 1
          
          echo "Green environment health checks passed"

      - name: Run Production Tests
        run: |
          echo "Running production tests..."
          # Run critical path tests against green environment
          # This could include API tests, E2E tests, etc.
          echo "Production tests passed"

      - name: Switch Traffic to Green
        run: |
          echo "Switching traffic to green environment..."
          # Update load balancer/DNS to point to green environment
          # This is where you'd implement the actual traffic switch
          echo "Traffic switched to green environment"

      - name: Monitor New Deployment
        run: |
          echo "Monitoring new deployment..."
          # Monitor for 5 minutes to ensure stability
          for i in {1..10}; do
            curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
            sleep 30
          done
          echo "Deployment monitoring completed successfully"

      - name: Cleanup Old Deployment
        run: |
          echo "Cleaning up old (blue) deployment..."
          # Remove old deployment after successful switch
          echo "Old deployment cleaned up"

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in this Release
            - Automated deployment from CI/CD pipeline
            - Version: ${{ needs.pre-deployment.outputs.version }}
            
            ## Deployment Information
            - Frontend URL: ${{ secrets.PRODUCTION_FRONTEND_URL }}
            - Backend URL: ${{ secrets.PRODUCTION_API_URL }}
            - Deployment Time: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-production.result == 'failure' || github.event.inputs.rollback == 'true')
    needs: [deploy-production]
    environment: production
    steps:
      - name: Rollback to Previous Version
        run: |
          echo "Rolling back to previous version..."
          # Switch traffic back to blue environment
          # Restore previous deployment
          echo "Rollback completed"

      - name: Notify Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          text: '🔄 Production deployment rolled back due to failure'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Post-deployment tasks
  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Update monitoring dashboards
        run: |
          echo "Updating monitoring dashboards..."
          # Update Grafana/DataDog dashboards with new version info

      - name: Warm up caches
        run: |
          echo "Warming up application caches..."
          # Make requests to warm up caches

      - name: Send deployment notifications
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🚀 Deployment completed successfully!
            Version: ${{ needs.pre-deployment.outputs.version }}
            Environment: ${{ needs.deploy-production.result == 'success' && 'Production' || 'Staging' }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Update deployment tracking
        run: |
          echo "Updating deployment tracking systems..."
          # Update deployment tracking in monitoring systems